Here's a Gatekeeper policy that checks for HPA on deployments/statefulsets and validates the minimum replica count:

```yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: Constraint
metadata:
  name: hpa-minimum-replica-check
spec:
  message: "" # Will be populated dynamically based on validation

  # Target resources to apply the policy to
  targets:
    - apiGroups: ["apps"]
      kinds: ["Deployment", "StatefulSet"]

  # Define the OPArego policy 
  rego: |
    package hpa_check

    # Check if HPA exists for the target resource
    has_hpa(target) {
      hpas := kube_hpa.hpas(meta.namespace)
      target_ref := target.spec.selector.matchLabels
      hpas | select(.spec.selector.matchLabels == target_ref) | empty == false
    }

    # Validate HPA minimum replica
    validate_hpa_min(target) {
      hpas := kube_hpa.hpas(meta.namespace)
      target_ref := target.spec.selector.matchLabels
      hpa := hpas | select(.spec.selector.matchLabels == target_ref)[0]
      if hpa != null {
        hpa.spec.minReplicas > 1
      } else {
        false
      }
    }

  # Define the validation logic based on HPA presence
  # and minimum replica count
  main {
    # Check for HPA presence
    if has_hpa(target) {
      # Validate minimum replica
      if not validate_hpa_min(target) {
        # Block deployment with message
        msg := "Given the application is set to scale, for higher environments you must set HPA minimum replica to greater than 1"
        constraint.set_message(msg)
        constraint.deny()
      }
    } else {
      # Warn about missing HPA
      msg := "There is not HPA present for higher environment usage, please consider adding one"
      constraint.set_message(msg)
      constraint.warn()
    }
  }
```

**Explanation:**

* This policy uses Rego language for validation logic.
* It targets deployments and statefulsets.
* The `has_hpa` function checks if an HPA exists for the target resource by looking for matching labels.
* The `validate_hpa_min` function checks if the minimum replica count in the HPA is greater than 1.
* The `main` function defines the validation logic:
    * If an HPA exists, it validates the minimum replica count. If it's 1, the deployment/sts is blocked with a specific message. 
    * If no HPA is present, a warning message is generated.
* The `constraint.set_message` function sets the appropriate message based on the validation result.
* `constraint.deny` blocks the deployment/sts creation and `constraint.warn` generates a warning message.

**How to use:**

1. Save this YAML file as `hpa-minimum-replica-check.yaml`.
2. Apply the policy using `kubectl apply -f hpa-minimum-replica-check.yaml`.

**Note:**

* This policy requires Gatekeeper to be installed and configured in your Kubernetes cluster.
* You can adjust the validation logic (e.g., minimum replica count) by modifying the Rego code. 